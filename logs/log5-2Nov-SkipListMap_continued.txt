---
Running Experiments V1.0
---
running experiment: ConcurrentSkipListMap - Weak atomicity in size+toString method
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "0, null, 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "0, null, 0, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 0, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@State
public class ConcurrentSkipListMapSizeAndToStringTest94 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
15 of 983500 executions gave weak(W(vis,lin)[.][*,A]) outcome: 0, null, 0, null, {0=0, 1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\{\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{\\}, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, 0, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, null, 0, \\{1=1\\}, 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=1\\}, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentSkipListMapSizeAndToStringTest1848 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
180 of 1038730 executions gave weak(W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]W(vis,lin)[.][*,A...) outcome: null, null, 0, {1=1}, 2
---
---
running experiment: ConcurrentSkipListMap - Weak atomicity in pollFirstEntry+toString method
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=0, null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "0=0, null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "0=0, null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=0, null, null, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1=0, null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1=0, null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1=0, null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1=0, null, null, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest130 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 656870 executions gave weak(W(vis,lin)[.][A,*]W(vis,lin)[.][A,*|*,A]) outcome: 1=0, null, null, null, {0=0, 1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=0, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, 1=0, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, 1=0, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, 1=0, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, 0=1, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*]:W(vis,lin)[.][A,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=1, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=1, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1=1, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*]:W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*]:W(ret)[A]"
         + "W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, 1=1, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, 1=1, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1=1, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*]:W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*]:W(ret)[A]"
         + "W(vis,lin)[.][A,*|*,A]:W(ret)[A]")
@Outcome(
    id = "0, null, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "0, null, null, \\{1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, null, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "0, null, null, \\{0=1, 1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, 1=1, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "0, 1=1, null, \\{1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, 1=1, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "0, 1=1, null, \\{0=1, 1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, 1=0, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "0, 1=0, null, \\{1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, 1=0, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "0, 1=0, null, \\{0=1, 1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, 0=1, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "0, 0=1, null, \\{1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "0, 0=1, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0=1, null, \\{0=1, 1=1\\}, null",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[!]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest129 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
27 of 865620 executions gave weak(W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]W(v...) outcome: null, 1=1, null, {0=1, 1=1}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "false, null, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "false, null, null, \\{\\}, 0=0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "false, null, null, \\{\\}, 1=1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "false, null, null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "false, null, null, \\{0=0\\}, 0=0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "false, null, null, \\{0=0\\}, 1=1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "false, null, null, \\{1=1\\}, 0=0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\{1=1\\}, 1=1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "false, null, null, \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\{0=0, 1=1\\}, 0=0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\{0=0, 1=1\\}, 1=1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest794 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
15 of 803900 executions gave weak(W(vis,lin)[.][A,*]W(vis,lin)[.][A,*|*,A]) outcome: false, null, null, {0=0, 1=1}, 1=1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, true, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, true, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=1, null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "0=1, null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "0=1, null, true, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=1, null, true, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1=0, null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1=0, null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1=0, null, true, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1=0, null, true, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, null, false, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, false, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, false, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, false, null, \\{0=1, 1=0\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "1=0, null, false, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1=0, null, false, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1=0, null, false, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1=0, null, false, null, \\{0=1, 1=0\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,lin)[.][A,*]:W(ret)[!]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][A,*|*,A]:W(ret)[!]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest766 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 868040 executions gave weak(W(vis,lin)[.][A,*]W(vis,lin)[.][A,*|*,A]) outcome: 1=0, null, true, null, {0=1, 1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{\\}, null, 1=1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, 0=0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*]:W(vis,lin)[.][A,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][A,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{1=1\\}, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{1=1\\}, null, 1=1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, \\{1=1\\}, null, 0=0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{0=0\\}, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{0=0\\}, null, 1=1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, 0=0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, 1=1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]:W(ret)[A]")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, 0=0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{\\}, null, 1=1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{\\}, null, 0=0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{1=1\\}, null, 1=1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, \\{1=1\\}, null, 0=0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, \\{0=0\\}, null, 1=1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, 0=0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, 1=1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, 0=0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest910 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 996400 executions gave weak(W(vis,lin)[.][*,A]W(vis,lin)[.][A,*]W(vis,lin)[.][A,*|*,A...) outcome: null, {0=0, 1=1}, null, 1=1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, null, null, 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, null, null, 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, null, null, 0, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, 0, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, 0, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, 0, \\{\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "null, 1=1, null, 0, \\{1=1\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "null, 1=1, null, 0, \\{1=0\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "null, 1=1, null, 0, \\{0=1\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "null, 1=1, null, 0, \\{0=1, 1=1\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "null, 1=1, null, 0, \\{0=1, 1=0\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "null, 0=1, null, 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, null, 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=1, null, 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, null, 0, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, null, 0, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, 0=1, null, 0, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, 1, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, 1, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, null, 1, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, 1, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, 1, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, 1, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, 1, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][A,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, 1, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, 1=1, 1, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][A,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, 1, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][A,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, 1, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][A,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, 1, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,A]:W(vis,lin)[.][A,A]"
         + "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][A,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, 1, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, 1, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=1, 1, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=1, 1, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=1, 1, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "null, 0=1, 1, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]:W(ret)[A]")
@Outcome(
    id = "null, 1=1, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,A]")
@Outcome(
    id = "null, 1=1, null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest1321 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
8 of 1047250 executions gave weak(W(vis,lin)[.][A,*|*,A]) outcome: null, 0=1, 1, null, {0=1, 1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, null, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, null, null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=0, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 0=0, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, 0=0, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0=0, null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1=1, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1=1, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, 1=1, null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "1, null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1, null, null, null, \\{0=0\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]")
@Outcome(
    id = "1, null, null, null, \\{1=1\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1, null, null, null, \\{0=0, 1=1\\}",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1, 0=0, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1, 0=0, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "1, 0=0, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0=0, null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1=1, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1, 1=1, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1=1, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "1, 1=1, null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*|*,A]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest1386 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 573330 executions gave weak(W(vis,lin)[.][A,*]W(vis,lin)[.][A,*|*,A]) outcome: 1, 1=1, null, null, {0=0, 1=1}
16 of 573330 executions gave weak(W(vis,lin)[.][A,*]W(vis,lin)[.][A,*|*,A]) outcome: null, 1=1, null, null, {0=0, 1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, \\{0=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "1=1, \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "1=1, \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "1=1, \\{0=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "1=1, \\{0=0, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "1=1, \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "1=1, \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "0=0, \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=0, \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=0, \\{0=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "0=0, \\{0=0, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "0=0, \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "0=0, \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "0=1, \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][A,*]")
@Outcome(
    id = "0=1, \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "0=1, \\{0=0\\}, null, 1, null",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*]:W(ret)[!]")
@Outcome(
    id = "0=1, \\{0=0, 1=1\\}, null, 1, null",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*]"
         + "W(vis,lin)[.][A,*]:W(ret)[!]")
@Outcome(
    id = "0=1, \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "0=1, \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, \\{0=0\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, \\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "0=1, \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=1, \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "0=1, \\{0=0\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=1, \\{0=0, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0=1, \\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*]"
         + "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]:W(ret)[A]"
         + "W(lin,po)[.][A,*|*,A]:W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][A,*|*,A]")
@Outcome(
    id = "0=1, \\{0=1, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][A,*|*,A]:W(vis,lin)[.][*,A]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest1429 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
14 of 1169040 executions gave weak(W(vis,lin)[.][*,A]) outcome: null, {0=1, 1=1}, null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, null, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "\\{0=0\\}, null, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, null, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=0\\}, null, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]")
@Outcome(
    id = "\\{\\}, null, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "\\{0=1\\}, null, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "\\{1=0\\}, null, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "\\{0=0\\}, null, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]")
@Outcome(
    id = "\\{0=1, 1=0\\}, null, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(lin,po)[.][A,*]:W(vis,po)[.][A,*]:W(vis,lin)[.][*,A]:W(ret)[A]")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest1636 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
76 of 1162240 executions gave weak(W(vis,lin)[.][*,A]) outcome: {0=1, 1=0}, null, null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentSkipListMap;

@JCStressTest
@Outcome(
    id = "null, false, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{\\}, null, 1=0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{\\}, null, 0=1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]")
@Outcome(
    id = "null, false, \\{1=0\\}, null, 1=0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{1=0\\}, null, 0=1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{0=1\\}, null, 1=0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\{0=1\\}, null, 0=1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\{0=1, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{0=1, 1=0\\}, null, 1=0",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][A,*]:W(ret)[!]"
         + "W(vis,lin)[.][A,*|*,A]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, false, \\{0=1, 1=0\\}, null, 0=1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{\\}, null, 1=0",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{\\}, null, 0=1",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{1=0\\}, null, 1=0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{1=0\\}, null, 0=1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{0=1\\}, null, 1=0",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]"
         + "W(vis,lin)[.][A,*]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{0=1\\}, null, 0=1",
    expect = Expect.FORBIDDEN,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][*,A]:W(ret)[!]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{0=1, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,po)[.][*,A]:W(vis,lin)[.][*,A]"
         + "W(lin,po)[.][*,A]:W(vis,po)[.][*,A]:W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{0=1, 1=0\\}, null, 1=0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "W(vis,lin)[.][*,A]"
         + "W(vis,lin)[.][A,*]")
@Outcome(
    id = "null, true, \\{0=1, 1=0\\}, null, 0=1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentSkipListMapPollFirstEntryAndToStringTest1823 {
    ConcurrentSkipListMap obj = new ConcurrentSkipListMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.pollFirstEntry());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 399260 executions gave violating outcome: null, true, {0=1}, null, 1=0
---
Experiments completed
