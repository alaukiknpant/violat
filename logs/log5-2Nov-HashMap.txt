---
Running Experiments V1.0
---
running experiment: ConcurrentHashMap - Weak behaviors in clear method
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapClearTest1047 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            obj.clear();
        } catch (Exception e) {
            
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
43 of 834030 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][A,*...) outcome: null, null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapClearTest1349 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            obj.clear();
        } catch (Exception e) {
            
        }
    }
}

---
4 of 2420300 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][A,*...) outcome: null, null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapClearTest1686 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            obj.clear();
        } catch (Exception e) {
            
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 878230 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, 1, null, true
---
---
running experiment: ConcurrentHashMap - Weak behaviors in contains method (shuffle)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsTest11708 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.contains(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1387630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, null, false
---
---
running experiment: ConcurrentHashMap - Weak behaviors in containsValue method (shuffle)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueTest268118 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 3151680 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, false, null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueTest197969 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1348630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, false, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueTest589884 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 3808480 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, null, 1, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueTest535027 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 50290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, 0, null, 0
1 of 50290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueTest201878 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1136160 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 0, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueTest499788 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2264940 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, 0, null, null, false
---
---
running experiment: ConcurrentHashMap - Weak behaviors in entrySet method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[1=1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\[0=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[0=0, 1=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest116 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
44 of 3897910 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, [1=1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1=0\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0=1\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0=1, 1=0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1=0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0=1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0=1, 1=0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapEntrySetTest195 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
124 of 2086070 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1=0], 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[1=1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\[0=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[0=0, 1=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest160 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
37 of 2982580 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, [1=1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1, 1=0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest334 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
70 of 3365080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1=0], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=1, 1=0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest494 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
92 of 2438530 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1=0], null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1=0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0=0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0=0, 1=0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1=0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0=0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[0=0, 1=0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapEntrySetTest549 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
67 of 3796050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1=0], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1=0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0=1, 1=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest527 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
156 of 3629230 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [1=0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0=0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest646 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
176 of 2606300 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1=1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1=0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0=1, 1=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest670 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
67 of 3062610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [1=0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=1\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1, 1=1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0=1\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1, 1=1\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest656 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
178 of 3332340 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1=1], true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=0\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=0\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0=0\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=0\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest615 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
135 of 2274700 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1=0], true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1=1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0=0\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0=0, 1=1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1=1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0=0\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0=0, 1=1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapEntrySetTest864 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
123 of 2653570 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1=1], true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1, 1=0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest915 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2172790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1=0], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1, 1=0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1040 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
200 of 3081980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1=0], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1=0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0=0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0=0, 1=0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1=0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0=0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0=0, 1=0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapEntrySetTest1117 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
133 of 2999000 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1=0], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0=0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1231 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
87 of 2598070 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1=1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=1\\], null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=1\\], null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=1, 1=1\\], null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1213 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
27 of 3470980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1=1], null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0=0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0=0, 1=0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1=0\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0=0\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0=0, 1=0\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1333 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
50 of 311780 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1=0], 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\[1=0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\[0=0, 1=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1338 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
137 of 2392890 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, true, [1=0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\[1=0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\[0=1, 1=0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1586 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
105 of 2239570 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, true, [1=0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[1=1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[0=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[0=1, 1=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1757 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
102 of 2725670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, [1=1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[1=1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\[0=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[0=1, 1=1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapEntrySetTest1807 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.entrySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
96 of 3895370 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, [1=1]
---
---
running experiment: ConcurrentHashMap - Weak behaviors in keySet method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeySetTest65 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 2861700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest91 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
31 of 2745760 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeySetTest18 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
46 of 3112810 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest144 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
117 of 4022430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest223 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
117 of 2830410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest638 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
29 of 3467560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], false, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest787 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
108 of 3471490 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest880 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
171 of 3047740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest889 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
47 of 3128370 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest890 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
77 of 2909300 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest980 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
24 of 4848360 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest977 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
14 of 4337530 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1232 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
143 of 4460090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1283 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 4129670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1267 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
53 of 3379380 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeySetTest1378 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
84 of 3502080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, null, [0, 1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1379 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
27 of 3349370 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeySetTest1415 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
35 of 2742340 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1433 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 3329390 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1513 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
36 of 3948600 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1599 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
70 of 3052670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, true, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1526 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 3235710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], false, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1575 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
112 of 3523620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 0, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1655 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
20 of 3567470 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], false, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1647 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 3730270 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1738 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
70 of 3642960 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1789 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
223 of 3245080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 0, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1971 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
85 of 3778060 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeySetTest1914 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
93 of 2451550 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, null, null
---
---
running experiment: ConcurrentHashMap - Weak behaviors in keys method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest48 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 2323400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest31 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1987270 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeysTest12 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
127 of 1645640 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0,1], null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest276 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1346550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0,1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0,1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeysTest201 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1727590 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest367 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 979110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[0,1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[0,1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest454 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1188630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0,1\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0,1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapKeysTest515 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1037960 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest732 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
14 of 2165040 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest810 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2342630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest828 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 1136770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0,1\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0,1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest1085 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
13 of 1531600 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0,1], 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest1167 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1601680 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest1105 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1680140 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest1283 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1474540 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest1580 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1227100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0,1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapKeysTest1755 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keys());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
13 of 1710780 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, 0
---
---
running experiment: ConcurrentHashMap - Weak behaviors in size method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest24 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
18 of 5636440 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest56 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
146 of 5966670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest67 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
13 of 5150440 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 1, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest31 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
17 of 4586160 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 1, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest32 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 499400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, null, 0
2 of 499400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest115 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
14 of 4119980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest183 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
65 of 4383560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapSizeTest150 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 3691110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest199 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1452550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest132 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1073740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 2, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 2, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest251 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
19 of 1896680 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest226 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
30 of 4677660 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, 0, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest278 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 541780 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest291 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 1638730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest274 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1854020 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest287 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
97 of 5867620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest210 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
278 of 6489960 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest280 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
243 of 5970450 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest269 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 1820720 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, false, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest345 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
48 of 5190850 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapSizeTest375 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.size());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 3102800 executions gave violating outcome: null, null, 2, 0
---
---
running experiment: ConcurrentHashMap - Weak behaviors in toString method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=0\\}, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=0\\}, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=0, 1=0\\}, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=0\\}, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=0\\}, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringTest57 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
79 of 2139820 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {1=0}, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest27 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
219 of 3906980 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=0}, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest170 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
38 of 3754010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest303 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
58 of 2223760 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0\\}, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=1\\}, null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringTest367 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2837 of 3353480 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {0=0, 1=1}, null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringTest395 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
175 of 792150 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {1=1}, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest378 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 3495920 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringTest581 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1643 of 3324290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, null, {0=0, 1=0}
29 of 3324290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, null, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest733 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3742220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=1\\}, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1\\}, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1037 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
328 of 817590 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {0=1, 1=1}, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1196 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 2852610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1180 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
36 of 1377580 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {}, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1395 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
44 of 3594570 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 0, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1409 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
22 of 3065340 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {1=1}, null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1503 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
46 of 4073350 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=0\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1562 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
50 of 4145670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {1=0}, null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1624 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
36 of 2914410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, null, null, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=1\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1742 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2654890 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {1=1}, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=1\\}, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1\\}, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1, 1=1\\}, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=1\\}, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=1\\}, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringTest1706 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
119 of 2704720 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {1=1}, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=0\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringTest1731 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
139 of 1505260 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {1=0}, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=0\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringTest1763 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1585 of 3214310 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {0=1, 1=0}, null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1844 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
38 of 2887040 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=1}, 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringTest1817 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
63 of 3806010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, {1=0}
---
---
running experiment: ConcurrentHashMap - Weak behaviors in values method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1, 0\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest88 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
278 of 4141780 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0], null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1, 1\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[1, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapValuesTest38 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
21 of 768330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1, 1], 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1, 0\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1, 0\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapValuesTest61 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
190 of 4738950 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [0], true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1, 0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[1, 0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapValuesTest113 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 3674820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1, 0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[1, 0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest383 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
60 of 3450810 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest369 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
84 of 4509880 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest305 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
154 of 4029380 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapValuesTest599 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
69 of 3552310 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1, 0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest654 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
90 of 4296600 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[1, 0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1, 0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest1247 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 2995320 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapValuesTest1301 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
166 of 1379420 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1, 0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1, 0\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest1474 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
126 of 4708310 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [0], 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[1, 0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest1533 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
69 of 3908810 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, [0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest1651 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
24 of 3447300 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest1729 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
109 of 3901840 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\[0, 0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\[1, 0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapValuesTest1896 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2980610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 1, null, [1, 0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapValuesTest1982 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.values());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
143 of 4719390 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [1]
---
---
running experiment: ConcurrentHashMap - Weak behaviors in elements method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest89 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 1388600 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0], null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0,0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest185 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
29 of 1658540 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0], null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1,0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest440 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 1103280 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [0], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0,0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, \\[0,0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapElementsTest411 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 698510 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 0, null, null, [0,0]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1,1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1,1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest480 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1746090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [], null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest508 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
20 of 2804040 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0], null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest822 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 1878730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1065 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1656190 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,0\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapElementsTest1018 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 1605400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0,0], null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0,0\\], null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0,0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1033 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 456000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [], null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1111 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 921480 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapElementsTest1158 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
51 of 1913880 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1,0], null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0,1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1273 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 780760 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\[1,1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapElementsTest1264 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
84 of 1876070 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 1, null, [1,1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1,0\\], null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1293 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1606850 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [0], null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1404 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1232190 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 0, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0,0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1467 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
335 of 1081430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 0, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1623 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1337240 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1,1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[1,1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapElementsTest1893 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
17 of 949790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, null, null, [1,1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1,0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapElementsTest1899 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.elements());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 968120 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [0]
---
---
running experiment: ConcurrentHashMap - Weak behaviors in isEmpty method (shuffle)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11701 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 7883530 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest900 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 2980650 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9383 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2934950 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3637 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
25 of 5893560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9170 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 6020050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest1668 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 4381500 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, false, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3600 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
103 of 7039530 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8629 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
156 of 6530800 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7253 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 6196840 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11187 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 2082220 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3590 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
25 of 6375100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest4094 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
18 of 2791280 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1233 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 6687540 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7578 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 2651130 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8888 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1610940 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1657 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2579 of 2240340 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3685 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
24 of 5463760 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9379 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 3071980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7181 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 6122330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest4222 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2832980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11874 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1145010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest4091 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
17 of 2819790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7020 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 4122200 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest725 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 5872810 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1738 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 1882510 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11815 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 1144110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7710 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 7017790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1651 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 3533000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11712 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1798700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true
22 of 1798700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7248 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 6488300 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9108 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 3204290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9041 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
102 of 4976870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8896 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 2313760 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3653 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
13 of 5767130 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8626 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
192 of 5346590 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11735 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 916180 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true
3 of 916180 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9079 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
19 of 4551900 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11746 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 6113810 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5555 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2036810 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3931 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 3270990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8991 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 2808710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3656 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 5027010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7191 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
15 of 6282330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7168 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 6519920 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9354 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 6764700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1259 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 3112580 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8674 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1627360 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11687 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 5698130 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, true
4 of 5698130 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7190 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 6043980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1420 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
28 of 7999200 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9024 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 4233420 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest995 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1170120 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5779 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
12 of 2420840 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5309 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 2120040 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5303 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1561970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest4213 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 3720830 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3925 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1994720 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest6986 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
45 of 5039080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11651 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1351100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11930 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
24 of 6875090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7185 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 4398030 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3808 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 4797770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest635 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
180 of 7310400 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3624 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
29 of 6264800 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11805 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2433700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9054 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
14 of 6057410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7495 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 3075360 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11727 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 2822180 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1358 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 6747610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, null
5 of 6747610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9351 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
119 of 7025570 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest845 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2843050 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11862 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2781880 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapIsEmptyTest11274 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 2129070 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7697 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 5731680 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1739 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 2375800 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11045 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
156 of 4658290 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3979 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2555380 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest769 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2364880 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7023 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 5790430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3960 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1392850 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5547 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 827310 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9085 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 2350900 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5791 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
13 of 6136480 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest4201 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 1835070 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11261 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 1977800 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7105 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
12 of 6564750 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapIsEmptyTest11025 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 2253010 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5989 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
161 of 7195120 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest937 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2469270 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest6005 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
20 of 7655440 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9088 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
14 of 2975270 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1510 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2758700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest11140 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 5362810 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest660 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
410 of 2260730 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 0, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest1040 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2160090 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, true, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5507 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
243 of 6439870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5770 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 3234770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11674 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
460 of 6877110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest9039 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 3521320 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1300 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
73 of 6017970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11883 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1454730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7186 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 6541150 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8754 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 7247910 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8678 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1147450 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest638 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 7470800 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapIsEmptyTest1679 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
52 of 4527900 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, false, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1448 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2007240 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5392 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
12 of 6776220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11902 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1311460 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11133 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
34 of 2301050 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5587 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
48 of 4968180 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5748 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 2424090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest990 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 472720 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5271 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
108 of 6445140 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11212 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1481940 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest730 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 5958520 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1458 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2489370 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1552 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1296550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest6964 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
67 of 6627480 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1659 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2630680 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1354 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
49 of 7021230 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5423 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 175590 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest4336 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 5427140 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 0, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3806 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
21 of 5973780 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest11602 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
40 of 6643210 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7398 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 2629330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest781 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 1539960 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7040 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
23 of 4961380 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest3853 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 5847410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest7166 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
24 of 5674430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest5528 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 3014390 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1536 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2482970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest1264 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 3052720 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapIsEmptyTest8799 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2683220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true
---
---
running experiment: ConcurrentHashMap - Weak behaviors in mappingCount method
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest99 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
12 of 4555050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest91 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
186 of 2648740 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest14 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
57 of 6365060 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest45 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
542 of 5571250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest66 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 910780 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 2, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 2, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest55 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
24 of 5979170 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 0, 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest33 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
102 of 4201130 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest93 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
10 of 5170920 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, 0
14 of 5170920 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest4 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
66 of 6008740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest23 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
19 of 4256520 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest103 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
13 of 6287050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest156 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
51 of 2296000 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest183 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 2816050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest144 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 5046930 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest152 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 6577290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest133 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
16 of 6637710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest175 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 6045000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest135 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 3989270 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest231 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
341 of 4417260 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest269 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 5214740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, 0, null
19 of 5214740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 2, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 2, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest294 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2770 of 1184310 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest207 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 5509390 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest242 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 4070600 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 1, 0, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest230 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
18 of 4232410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, 0, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest369 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
45 of 6278370 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, false, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest367 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
15 of 6371170 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest337 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
15 of 5932400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest327 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1445090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest405 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
104 of 5859270 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest423 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
4 of 244450 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest472 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
128 of 4476660 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest459 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
63 of 5077770 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest466 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
19 of 6506590 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest450 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
6 of 6546900 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountTest477 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
8 of 988970 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, 0, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest467 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
41 of 6766600 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest444 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
5 of 2367220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, false, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest475 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
14 of 2739320 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest493 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
11 of 2096160 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, 0, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest457 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 5234650 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, 0, null
3 of 5234650 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest530 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1661770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest587 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3 of 3167010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountTest525 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
9 of 5695860 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest585 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2118340 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, null, 0, null
1 of 2118340 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest537 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
195 of 5286670 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest560 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
7 of 2208300 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest558 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
2293 of 2187790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountTest582 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult4 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult4 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
}

---
3663 of 1840510 executions gave violating outcome: null, 2, null, 1
---
---
running experiment: ConcurrentHashMap - Weak behaviors in mappingCount+keySet method
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\[\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\[1\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, \\[1\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, \\[\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, \\[1\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, \\[1\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest67 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
12 of 1542950 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, false, [1], 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], 0, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], 0, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest79 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2324880 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, [], 0, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest47 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2951120 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, [1], 1, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, \\[0\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, \\[0, 1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 2, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 2, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 2, \\[0\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 2, \\[0, 1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 2, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 2, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "1, 2, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 2, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest1 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 1318500 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: 1, 1, [0, 1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], 0, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 0, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 0, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 0, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest70 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
198 of 2881440 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], 0, null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], 0, null, 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 0, null, 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], null, null, 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null, 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest71 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1115990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, [0], 0, null, 0
3 of 1115990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, [], 0, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, 0, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, false, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, false, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, false, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest18 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2528400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, false, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 1, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest23 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2363970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: [0], 1, false, 0, null
4 of 2363970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], 1, false, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0\\], 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\], 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[\\], 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[1\\], 2",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, \\[0\\], 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[0, 1\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, \\[0, 1\\], 2",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest62 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
229 of 489470 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, [0, 1], 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, 0, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest117 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 754430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 1, 0, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest175 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
26 of 2502390 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, [0], 0, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\[\\], 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[\\], 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[1\\], 0, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[1\\], 1, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest127 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3065150 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: false, [1], 0, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, \\[\\], true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, \\[\\], true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\[0\\], true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, \\[0\\], true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\[\\], false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\[\\], false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, \\[0\\], false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, \\[0\\], false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest121 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
8 of 2393100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, [0], true, 0
15 of 2393100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, [], true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest113 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
21 of 2941090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, [0], 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, 0, \\[\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, \\[\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, \\[0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, 0, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, null, \\[\\], 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, null, \\[0\\], 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest199 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1072040 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, 0, [0], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "0, null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 1, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest195 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
13 of 716030 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 0, 1, null, null, [0, 1]
4 of 716030 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, 1, null, null, [0, 1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest114 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
17 of 3285550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, [1], 0, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, 0, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, 1, 0, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, 1, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 1, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, 1, 0, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], 1, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], 1, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], 1, 0, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapMappingCountAndKeySetTest261 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.mappingCount());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
43 of 261810 executions gave violating outcome: [], null, 0, null, 2
---
---
running experiment: ConcurrentHashMap - Weak behaviors in containsValue+isEmpty method (random)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest80 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1764200 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest87 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 5762720 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, false, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, false, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest40 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
36 of 2639960 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, false, false, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, 0, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, 0, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest13 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
681 of 4331420 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, 0, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest44 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
116 of 6042890 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest18 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
72 of 5264650 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, false, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, true, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, false, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, true, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest73 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
31 of 2778540 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest27 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 4522730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, false, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest147 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 3236890 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest116 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3195500 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest181 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
208 of 3746840 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest118 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1240800 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: false, true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest186 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
46 of 6495430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest163 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 809470 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest141 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 3864640 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 1, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest167 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 5722640 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: false, 1, true, false, null
6 of 5722640 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest133 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
600 of 1395440 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, true, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest125 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
14 of 5227830 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 1, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest109 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 5695530 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, false, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest102 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
23 of 5381620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: false, true, true, null, null
49 of 5381620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest271 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1306310 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest254 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
31 of 5821450 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, false, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest258 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
17 of 3420810 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, true, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 1, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, 0, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, false, 0, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, true, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, false, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest291 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1180340 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: 1, true, null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest223 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
37 of 6982230 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest272 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 4520080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, 0
33 of 4520080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, null, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, 0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest231 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
8 of 2531150 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest200 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
20 of 3656370 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, false, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, true, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest275 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
22 of 4453840 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: true, false, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest269 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
113 of 4711700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, 1, true, true, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest364 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
36 of 3593190 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, true, null, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest305 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 1770670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest383 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 265930 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest300 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
390 of 5434830 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: false, null, true, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest384 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 5466630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest392 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 7248110 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: 0, true, false, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest398 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 3663820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, true, true, null, 0
8 of 3663820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: true, true, true, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 0, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest319 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 5551610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest354 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
73 of 4250540 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest333 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
27 of 6418170 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, true, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 1, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest376 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
99 of 4888860 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, true, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest382 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 4753570 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: 1, null, false, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest405 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
45 of 3821710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest446 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 4142220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest499 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
92 of 1039070 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, true, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, false, 1, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, true, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest420 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1350530 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, false, 1, true, true
7 of 1350530 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest423 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
14 of 6686560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, false, true, true
27 of 6686560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, null, false, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, 0, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest484 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 2559390 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, true, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest427 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
58 of 5109690 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 1, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest495 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 4399780 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest414 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 4707330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest592 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 3360180 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest559 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
16 of 4594460 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, true, true
8 of 4594460 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest526 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
22 of 5093410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, null, false
2 of 5093410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest506 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 4640840 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest569 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
22 of 5048060 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, false, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest564 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 1991710 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, true, null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest553 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
71 of 5322150 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: false, false, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest650 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 4108090 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest627 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2572430 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest648 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 3722870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest610 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 4215400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, false, true, true, null
19 of 4215400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest645 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2906760 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, false, true, true, 0
11 of 2906760 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, true, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest675 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 5624580 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, false, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest730 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 4532100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, false, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest714 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
22 of 4945250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest779 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
13 of 5286200 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: false, null, true, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest795 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1809210 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, false, 0, true
3 of 1809210 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, true, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest761 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 4522720 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, false, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 0, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest725 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 1265220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 0, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest832 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
38 of 4383700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest894 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
141 of 5935830 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest882 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 5750000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest815 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
147 of 6034390 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest812 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
333 of 3153770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest816 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
69 of 6497100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest895 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
13 of 1593400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, false, null
1 of 1593400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest875 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
51 of 5388480 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest837 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 5558230 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, true, true
28 of 5558230 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest887 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
195 of 1436650 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest962 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
18 of 2154850 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, true, true, true, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest951 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1136760 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, null, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 0, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 0, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest983 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2015520 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, null, 0, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest963 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 3781420 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest965 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 820920 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: null, 1, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest909 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
75 of 4365900 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: true, null, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest908 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
35 of 5872850 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: true, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest998 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
18 of 2416110 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest941 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 4033260 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, false, true, null, true
40 of 4033260 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest906 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
143 of 5724630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1039 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 5894190 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, true, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1016 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
15 of 4508040 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, true, true, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 0, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 0, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1046 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 3985380 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 0, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1041 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 5304640 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1029 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 3618310 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, null, true
21 of 3618310 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1090 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
682 of 2975190 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: false, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, null, false, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1032 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 694640 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1012 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 4978610 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, false, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1035 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
29 of 5063010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, true, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1044 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
20 of 6029370 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: true, false, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1133 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1522220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1151 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1174750 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1146 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
13 of 4098080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, false, false, false, 1
6 of 4098080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, false, false, true, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1127 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 3583030 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, true, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1103 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
202 of 5046070 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: false, null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1105 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
25 of 3634420 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1122 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 3735520 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: true, false, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1113 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1132310 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, false, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1180 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 4243450 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1196 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 4484250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, false, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1135 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 1461050 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1197 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 4431230 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1167 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1212250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1132 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 6385610 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: 1, null, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1286 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 3885760 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1295 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
16 of 5921400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, 1, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1244 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2262970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, false, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, false, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1205 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 4677520 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, false, true, true, null
6 of 4677520 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, false, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1202 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 20570 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, 1, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1213 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
319 of 5954000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1296 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
116 of 7210890 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1215 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 4613400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1221 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 1686860 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 0, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1241 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 4167420 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, false, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1270 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 4269240 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, false, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 0, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1294 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 996740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, 0, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1257 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
40 of 4789270 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, true, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1238 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3537000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, true, false, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 0, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, false, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1282 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 1387870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, true, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1240 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
20 of 5416170 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, null, null, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, 0, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 0, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 0, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 0, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1350 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1919260 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, 0, null, true, null
2 of 1919260 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 0, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1328 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
249 of 5824590 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, false, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, 1, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, null, 1, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, 1, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 1, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1340 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1626800 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1364 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
18 of 5617730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1335 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 5457740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, 0, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, true, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, 0, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, 0, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 0, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 0, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1360 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 2022300 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, 0, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1337 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
200 of 4922970 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1300 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1781060 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, false, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 0, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 0, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 0, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, 1, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, 1, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, 1, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 0, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, 0, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, 0, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1305 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1023750 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, 0, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1394 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
15 of 2580120 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, 0, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, 1, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, 1, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1402 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1443490 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, false, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, false, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1492 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 783150 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, false, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, true, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1411 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
81 of 5228670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1445 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1126820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, 1, null, true
7 of 1126820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1488 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3897020 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, 0, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, 0, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1422 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 5734010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, false, null, 0, true
5 of 5734010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, null, 0, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1412 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
14 of 4151990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, false, null, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1451 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
53 of 4196920 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: true, true, null, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1468 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1667250 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, 1, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1537 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1847080 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, false, 1, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, 1, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, null, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1598 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 3570680 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, 1, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, true, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, false, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1565 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 521620 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: 0, true, false, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "1, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1550 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 983060 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 1, true, null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, true, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, false, null, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "false, true, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, 1, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, 1, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1549 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
8 of 2172170 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, 1, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, true, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1507 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
43 of 4204990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: true, true, null, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1530 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
139 of 5257880 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, true, false, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1689 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
20 of 5540530 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1682 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
96 of 6181190 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, null, true, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, false, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, true, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1685 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
25 of 4786000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: true, true, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1644 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
21 of 4519620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1627 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 4599550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, 0, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 0, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, true, 1, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, 1, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, true, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, true, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, true, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1624 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 658980 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: false, 1, true, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1681 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
16 of 5217120 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, 1, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1647 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 4723790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1773 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
227 of 3942800 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, 0, false, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1709 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
221 of 6105740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, true, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1732 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
26 of 7074220 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: true, null, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, 1, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, 1, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1793 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 3006250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, null, 1, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, 0, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 0, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 0, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, 1, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, 1, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, true, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, 1, null, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, 1, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1785 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2112940 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 1, 1, true, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, true, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, 0, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, 0, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, 0, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, 0, false, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1770 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 2258110 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: null, 0, true, true, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, null, false, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, null, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, null, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, true, null, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, false, null, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, false, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1767 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 2638780 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A...) outcome: 0, true, null, false, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, 1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1826 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 3711670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, 1, true, null, null
17 of 3711670 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, 1, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1867 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
15 of 3931820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: true, true, null, true, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1866 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
16 of 5227650 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, false, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, false, true, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, true, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, true, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, true, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1819 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
117 of 4498470 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A...) outcome: null, false, true, true, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1874 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
20 of 5503110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: false, null, false, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, false, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1991 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 5145410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, false, true, true
33 of 5145410 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, true, true, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, true, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, false, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, true, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, true, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, false, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1961 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 4487900 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: true, true, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, false, 1, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, 1, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1974 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
13 of 971110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, null, false, 1, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, true, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, 1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, 1, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, true, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, 1, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1963 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
55 of 1030620 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: true, null, true, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 0, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1983 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
11 of 623100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, 0, false, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, null, false, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, true, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, false, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, false, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, null, true, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, false, null, true, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1951 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.containsValue(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 4188630 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: 1, false, null, false, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, false, true, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, true, null, false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, false, null, false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1980 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
28 of 4507110 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: null, true, true, null, false
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, true, false, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, true, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, true, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, true, false, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, true, true, false, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, false, false, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, false, true, false, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, true, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, true, true, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, false, false, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, false, true, false, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapContainsValueAndIsEmptyTest1976 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.isEmpty());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsValue(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1856380 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A...) outcome: 1, true, true, false, null
---
---
running experiment: ConcurrentHashMap - Weak behaviors in toString+keySet method (shuffle)
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest13348 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
141 of 1924760 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, [0, 1], 0, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], \\{\\}, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest127880 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
91 of 2773220 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], {}, null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], null, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], 1, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 1, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 1, \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest40711 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2149990 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, {0=1}, null, null
45 of 2149990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], null, {1=1}, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest51435 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
28 of 1411560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=1}, [0, 1], null, 1, null
15 of 1411560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, [1], null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest105102 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 1752240 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, [1], {0=0, 1=1}
11 of 1752240 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [], {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, 1, null, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\{1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, 1, null, \\{1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, \\{1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, 1, null, \\{1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, 1, null, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, 1, null, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 1, null, \\{0=1, 1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, \\{0=1, 1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, 1, null, \\{0=1, 1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 1, null, \\{0=1, 1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest28610 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
24 of 1984710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, 1, null, {1=0}, [0, 1]
18 of 1984710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 1, null, {}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, \\[\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, \\[1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{\\}, \\[0\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, \\[0, 1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[0\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[0, 1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[0\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[0, 1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[1\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[0\\], true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[0, 1\\], true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, \\[\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, \\[0\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, \\[0, 1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[0\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=0\\}, \\[0, 1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[0\\], false",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1\\}, \\[0, 1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[0\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, \\[0, 1\\], false",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest97037 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
30 of 838230 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {1=0}, [0, 1], true
43 of 838230 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {}, [1], true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\{0=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, true, \\{0=0, 1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=0, 1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=0, 1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=0, 1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest83087 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
82 of 1489050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, true, {1=1}, [0, 1]
44 of 1489050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, true, {}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], \\{0=1\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{0=1, 1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{0=1\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{0=1, 1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{0=1\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], \\{0=1, 1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1\\}, null, null, true",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1, 1=0\\}, null, null, true",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest109661 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
4 of 1822010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: [1], {0=1, 1=0}, null, null, true
54 of 1822010 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], {1=0}, null, null, true
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=0\\}, null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=0\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest90006 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
8 of 2438200 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=0}, 0, null, [0], null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "1, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\{\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\{0=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\{0=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\{0=0\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=0\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\{0=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\{0=1\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=1\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest20493 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 105120 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, {0=0}, null, [1], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], \\{\\}, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest127869 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
135 of 2691580 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], {}, null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, \\{0=1, 1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=1, 1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest111294 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 2912580 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {1=0}, null, [0], null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0, 1\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest63222 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 3037550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1], null, {0=1}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\[1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\[1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0, 1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\[0, 1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest86248 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
120 of 591700 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 0, null, [1], null, {0=0, 1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{0=1, 1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=1, 1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{0=1, 1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=1, 1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest65143 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
115 of 1696490 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, false, {1=1}, [0, 1]
130 of 1696490 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, {}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\{\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\{1=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\{0=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\{0=0, 1=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\{\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, \\{1=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, \\{0=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\{0=0, 1=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest55738 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
113 of 3570900 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, {1=0}, [], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, 0, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, 0, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=0\\}, 0, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=0\\}, 0, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, 0, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, 0, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=0\\}, 0, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=0\\}, 0, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, 0, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, 0, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=0\\}, 0, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0, 1=0\\}, 0, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\{0=0, 1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=0, 1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\{0=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=1, 1=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\{0=1, 1=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest111590 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
61 of 766690 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {0=0, 1=0}, 0, [0], null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest31591 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
88 of 2739820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, [0, 1], null, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], false, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], false, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], true, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], true, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], true, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], true, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest130119 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3603800 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], false, {}, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, null, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, 0, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, 0, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, 0, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 0, null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest84214 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 839820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], null, 0, null, {}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, true, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, true, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, true, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, true, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, true, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, true, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, true, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, true, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], null, false, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, false, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, false, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, false, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, false, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], null, false, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, false, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], null, false, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest30533 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2609770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0], null, false, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\[1\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\[1\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\[0\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\[0\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\[0, 1\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[1\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, \\[1\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[1\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0, 1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0, 1\\], \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0, 1\\], \\{0=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0, 1\\], \\{0=1, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest77823 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1586400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [], {1=1}, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest113491 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
92 of 2124590 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, {}, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{0=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\{0=0, 1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{0=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{0=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=0, 1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=0, 1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{0=0, 1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=0, 1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest101452 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
44 of 1208250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, {1=0}, [0, 1]
33 of 1208250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest68814 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
3 of 1507730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, [1], {0=0, 1=1}
9 of 1507730 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [], {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, null, null, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1\\}, null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, null, null, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, null, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, null, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, null, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, null, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, 1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 1, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 1, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, 1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, 1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, 1, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, 1, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, 1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, 1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, 1, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, 1, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, 1, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, 1, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, 1, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, 1, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest54399 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
109 of 239520 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=1}, 1, null, null, [0, 1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{\\}, null, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest71437 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
34 of 3157640 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {}, null, null, [1], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{\\}, null, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest16901 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
193 of 3673750 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {}, null, null, [1], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, \\{\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, null, \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[\\], null, null, \\{0=1\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, null, \\{0=1, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, \\{\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, null, \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, null, \\{0=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, null, \\{0=1, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], null, 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, 1, \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], null, 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, 1, \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, 1, \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, 1, \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest25931 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
202 of 1435080 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [], null, null, {1=0}, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest103483 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 911100 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0, 1], 0, null, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], false, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], false, null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], false, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], false, null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], false, null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], false, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], false, null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest132851 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 2489000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], false, null, {0=0}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\{0=1, 1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\{0=1, 1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=1, 1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\{0=1, 1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\{0=1, 1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest101429 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
136 of 1790770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, false, {1=0}, [0, 1]
128 of 1790770 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, {}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\[0, 1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest99506 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2685840 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [1], null, {0=0}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=0\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=0\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=0\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=0\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, \\[\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{\\}, \\[0\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, \\[\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[1\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[0\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[0, 1\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[1\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[0\\], 0, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[0, 1\\], 0, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest15238 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
33 of 637190 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=0}, [0, 1], 0, null, null
42 of 637190 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {}, [1], 0, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, null, 0, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, 0, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, null, null, 0, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, 0, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest35982 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
79 of 3658250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, null, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, \\{1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, \\{0=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, \\{0=0, 1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, \\{0=0, 1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, \\{1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, \\{0=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, \\{0=0, 1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, \\{0=0, 1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, \\{1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], null, \\{0=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, \\{0=0, 1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], null, \\{0=0, 1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, \\{\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{0=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{0=0, 1=1\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, \\{0=0, 1=0\\}, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{0=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 1, \\{0=0, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], 1, \\{0=0, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{0=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{0=0, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 1, \\{0=0, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, \\{0=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 1, \\{0=0, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 1, \\{0=0, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{1=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{0=0\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 1, \\{0=0, 1=0\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 1, \\{0=0, 1=1\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest76755 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
165 of 1110000 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 1, {0=0, 1=0}, null, null
8 of 1110000 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], null, {1=1}, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, true, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, true, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, true, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], null, true, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, true, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, true, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, true, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], null, true, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest135883 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
98 of 1899820 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], null, true, null, {0=1, 1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1, 1=0\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1, 1=0\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1, 1=0\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1, 1=0\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest10710 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
114 of 1951170 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {0=1, 1=0}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{1=1\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=0, 1=1\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest43087 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
131 of 1904290 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, {0=0, 1=1}, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, \\[0\\], 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, null, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, null, \\[0\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0\\}, null, \\[0\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, \\[\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, \\[0\\], 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, 0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, 0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=0\\}, 0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, 0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0\\}, 0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0\\}, 0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, 0, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, 0, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest106906 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
48 of 597390 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=0}, 0, [], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], \\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], \\{0=1, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{0=1, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{0=1, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1, 1=1\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], \\{\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[\\], \\{0=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{0=1, 1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{0=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{0=1, 1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{0=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], \\{0=1, 1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1, 1=1\\}, 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest18999 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
160 of 1293910 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], {0=1, 1=1}, 1, null, null
72 of 1293910 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [], {1=1}, 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=0, 1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], \\{1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0, 1=1\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0, 1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{1=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0, 1=1\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest45990 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
145 of 1492850 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [0, 1], {1=1}, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1, 1=1\\}, null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest55303 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
7 of 1392560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: [1], {0=1, 1=1}, null, 1, null
3 of 1392560 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], {1=1}, null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=1, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=1, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=1\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=1, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{1=0\\}, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=1\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=1, 1=0\\}, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=1, 1=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest27757 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
98 of 1833270 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [0, 1], {1=0}, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\{\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest5386 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
14 of 3788400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {}, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=0\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[1\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0\\], null, null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0, 1\\], null, null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest87878 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1121 of 1693200 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=0}, [0, 1], null, null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{\\}, \\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[1\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0\\], 1, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0, 1\\], 1, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest69375 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
89 of 1463540 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=1}, [0, 1], 1, null, null
66 of 1463540 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {}, [1], 1, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest128151 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 3489960 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [1], {}, null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest87832 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
271 of 1375400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=0}, [0, 1], null, null, 0
1 of 1375400 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, [1], null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest74982 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 1244320 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, {0=0}, null, [1], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[1\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0\\], null, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0, 1\\], null, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest106279 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
87 of 2074930 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=1}, [0, 1], null, null, null
141 of 2074930 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, [1], null, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, null, \\{\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, \\{\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, \\{\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, \\{\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, \\{0=1\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, \\{0=1\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, null, \\{0=1\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, null, \\{0=1\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, null, \\{\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{0=1\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{0=1\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{0=1\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, null, \\{0=1\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest7374 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2017420 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, null, {0=1}, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[1\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\[0, 1\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest68813 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
70 of 1504990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, [1], {0=0, 1=0}
79 of 1504990 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, [], {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=0\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[1\\], null, null, 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[0\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, \\[0, 1\\], null, null, 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest87893 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 2529870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=0}, [0, 1], null, null, 0
58 of 2529870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=0}, [0], null, null, 0
61 of 2529870 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, [1], null, null, 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, 1, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, 1, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, 1, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, 1, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, 1, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, 1, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=1\\}, 1, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, 1, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, 1, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, 1, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1\\}, 1, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, 1, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest58227 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
273 of 1067280 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {0=1, 1=1}, 1, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\[\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[0, 1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, \\[1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0, 1\\], \\{\\}, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest113931 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
126 of 3232790 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, [1], {}, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, 0, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, 0, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, 0, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, 0, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=0\\}, null, 0, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, null, 0, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, null, 0, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=0\\}, null, 0, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, 0, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, 0, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, 0, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, 0, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, 0, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, 0, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, 0, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=0\\}, null, 0, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest126810 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
13 of 1762740 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {1=0}, null, 0, null, [0, 1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], \\{\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=0\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{0=0, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], \\{0=0, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest64423 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
146 of 1543100 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], {0=0, 1=1}, 1
217 of 1543100 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [], {1=1}, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], \\{\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], \\{0=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], \\{0=1, 1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], \\{\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], \\{0=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], \\{0=1, 1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], \\{1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], \\{0=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], \\{0=1, 1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], \\{\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], \\{0=1, 1=1\\}, false, null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest54823 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
95 of 2699250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: [1], {0=1, 1=1}, false, null, null
71 of 2699250 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], {1=1}, false, null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[1\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0\\], null, 1, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, \\[0, 1\\], null, 1, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest105991 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
9 of 1410050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=1}, [0, 1], null, 1, null
3 of 1410050 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, [1], null, 1, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, \\[\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, \\[\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, \\[\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest104205 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
31 of 728890 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, null, [], null, {0=1, 1=1}
47 of 728890 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], 0, {0=1, 1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[1\\], 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], 1, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0, 1\\], 1, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[1\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0, 1\\], null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest99938 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.remove(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
10 of 2307550 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0, 1], 1, {}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], true, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], true, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], true, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], true, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], true, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], true, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], true, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[\\], false, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], false, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], false, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], false, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], false, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], false, null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], false, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], false, null, \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest12258 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 2420980 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0], true, null, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\[\\], 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[\\], 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\[0\\], 0, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[\\], null, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, \\[0\\], null, null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\[0\\], null, null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\[0\\], null, null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\[0\\], null, null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\[0\\], null, null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, \\[0\\], null, null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest12447 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1456 of 2093620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0], 0, null, {0=0, 1=1}
1 of 2093620 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, [0], 0, null, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, 0, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, null, 0, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, null, 0, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, null, 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest11515 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1760080 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: [], null, null, 0, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\[\\], null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], null, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], null, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[1\\], null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], null, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0\\], null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], null, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[0\\], null, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], null, null, \\{\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, null, \\{0=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, null, \\{1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], null, null, \\{0=1, 1=1\\}, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], 0, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[\\], 0, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[\\], 0, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[\\], 0, null, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], 0, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[1\\], 0, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[1\\], 0, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\[1\\], 0, null, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0\\], 0, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0\\], 0, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0\\], 0, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0\\], 0, null, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], 0, null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\[0, 1\\], 0, null, \\{1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\[0, 1\\], 0, null, \\{0=1\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\[0, 1\\], 0, null, \\{0=1, 1=1\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest117062 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1 of 263990 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: [1], 0, null, {0=1}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[1\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "1, null, \\[0, 1\\], null, \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest13405 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
21 of 1500180 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, [0, 1], 1, {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, true, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\[\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\[1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\[1\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "null, null, true, \\[0\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0, 1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, true, \\[0, 1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, true, \\[0, 1\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\[1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\[1\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[0\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\[0\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[0\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, false, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[0, 1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, false, \\[0, 1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, false, \\[0, 1\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest104981 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
68 of 1330830 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, false, [1], {0=1, 1=0}
56 of 1330830 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, false, [], {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\{\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{1=0\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{1=0\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{1=0\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{1=0\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\{0=1\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, 1, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, 1, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, 1, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\{0=1, 1=0\\}, 1, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\{\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\{\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, null, \\{1=0\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{1=0\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{1=0\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{1=0\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, null, \\{0=1\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1, 1=0\\}, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1, 1=0\\}, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1, 1=0\\}, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "0, null, \\{0=1, 1=0\\}, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest116096 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
27 of 933840 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, {1=0}, 1, [0, 1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, false, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, false, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, false, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, false, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, false, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, false, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, false, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, true, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, true, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1\\}, true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1\\}, true, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, true, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, true, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, true, \\[0\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, true, \\[0, 1\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest33775 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
28 of 1114270 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=1}, true, [0, 1], null, null
25 of 1114270 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, false, [1], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=1, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest32465 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
137 of 1463330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, 0, [1], {0=1, 1=0}
55 of 1463330 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 0, [], {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 1, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[0\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 1, \\[0\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 1, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 1, \\[1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 1, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[1\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 1, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[0, 1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 1, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, 1, \\[0, 1\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest32485 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
77 of 1798960 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, 1, [1], {0=1, 1=1}
60 of 1798960 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, 1, [], {1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, 0, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, 0, \\[0, 1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[1\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[0\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[0\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[0\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0, 1\\], \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0, 1\\], \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0, 1\\], \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0, 1\\], \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "1, null, null, \\[0, 1\\], \\{0=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "1, null, null, \\[0, 1\\], \\{0=1, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest68757 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
192 of 478360 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: 1, null, null, [0], {0=1, 1=1}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\[0, 1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\[\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "true, \\[0, 1\\], null, \\{\\}, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\[0, 1\\], null, \\{0=0\\}, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest63051 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2957940 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, [1], null, {0=0}, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[1\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 0, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest67973 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
98 of 1266750 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, null, [1], 0, {0=0}
34 of 1266750 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, [], null, {1=0}
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[1\\], 0",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0, 1\\], 0",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, null, \\[0, 1\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest20549 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
6 of 2369490 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: null, {0=0}, null, [1], 0
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, \\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, \\[0\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, \\[0, 1\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, \\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, \\[0\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, \\[0, 1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, \\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, \\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, \\[0\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0\\}, \\[0, 1\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=1\\}, \\[\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=1\\}, \\[1\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0, 1=1\\}, \\[0\\], null, 0, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=1\\}, \\[0, 1\\], null, 0, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest87715 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.get(0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
27 of 1680500 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: {1=1}, [0, 1], null, 0, null
20 of 1680500 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: {}, [1], null, 0, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "false, \\{\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\{\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "false, \\{\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "false, \\{\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "true, \\{\\}, null, null, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\{\\}, null, null, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\{\\}, null, null, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "true, \\{\\}, null, null, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest4619 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.containsKey(0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
12 of 3310910 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: false, {}, null, null, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, null, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, null, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1\\}, null, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, null, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, null, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, 1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{\\}, 1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{1=1\\}, 1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{1=1\\}, 1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1\\}, 1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1\\}, 1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=1, 1=1\\}, 1, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=1, 1=1\\}, 1, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest88815 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
56 of 1057570 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=1}, 1, [], null, null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0\\}, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=1\\}, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{1=1\\}, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, \\[\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, \\[1\\], null, 1",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, \\[\\], null, null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, \\[1\\], null, null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest92593 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.remove(1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
2 of 1202210 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {}, [1], null, 1
15 of 1202210 executions gave weak({ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*...) outcome: null, {}, [], null, 1
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "\\{\\}, null, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, null, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, null, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, null, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, null, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0\\}, null, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0, 1=1\\}, null, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{0=0, 1=1\\}, null, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[!] }")
@Outcome(
    id = "\\{\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{1=1\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{1=1\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,*], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "\\{0=0\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "\\{0=0, 1=1\\}, 0, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "\\{0=0, 1=1\\}, 0, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest107859 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
5 of 913180 executions gave weak({ W(lin,po)[.][A,*], W(vis,po)[.][A,*], W(vis,lin)[.][*,A...) outcome: {1=1}, 0, null, [0], null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, null, \\{\\}, \\[\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}, \\[\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}, \\[1\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}, \\[0\\]",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(lin,po)[.][A,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*], W(vis,lin)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, null, \\{0=1, 1=1\\}, \\[0, 1\\]",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest46567 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.get(1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
126 of 2364860 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,po)[.][A,*]...) outcome: null, null, null, {1=1}, [0, 1]
173 of 2364860 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, null, null, {}, [1]
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, \\{\\}, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{\\}, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{1=1\\}, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0\\}, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=0, 1=1\\}, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1\\}, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1\\}, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, \\{0=1, 1=1\\}, 1, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{1=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][!,!], W(vis,po)[.][!,!], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{1=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\{0=1, 1=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=1, 1=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "0, \\{0=0\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=0\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=0, 1=1\\}, null, \\[\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][A,*], W(vis,po)[.][A,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][A,A], W(vis,lin)[.][A,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[A] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "0, \\{0=0, 1=1\\}, null, \\[0\\], null",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@State
public class ConcurrentHashMapToStringAndKeySetTest111603 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,1));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r3 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
        try {
            result.r4 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
1610 of 791710 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, {0=1, 1=1}, 1, [0], null
---
Violation/weakness discovered in the following harness.
---
package xxxx.util.concurrent;
import org.openjdk.jcstress.annotations.*;
import org.openjdk.jcstress.infra.results.*;
import java.util.Arrays;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.ConcurrentHashMap;

@JCStressTest
@Outcome(
    id = "null, null, \\[\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[1\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, null, \\[0, 1\\], 1, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, \\{\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, \\{1=1\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, \\{1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, \\{0=0\\}",
    expect = Expect.ACCEPTABLE_INTERESTING,
    desc = "{ W(lin,po)[.][*,*], W(vis,po)[.][*,A], W(vis,lin)[.][*,A], W(vis,vis)[L][*,*], W(ret)[*] }"
         + "{ W(lin,po)[.][*,A], W(vis,po)[.][*,A], W(vis,lin)[.][A,*], W(vis,vis)[L][*,*], W(ret)[*] }")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, \\{0=0, 1=1\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@Outcome(
    id = "null, 0, \\[0, 1\\], null, \\{0=0, 1=0\\}",
    expect = Expect.ACCEPTABLE,
    desc = "atomic")
@State
public class ConcurrentHashMapToStringAndKeySetTest85966 {
    ConcurrentHashMap obj = new ConcurrentHashMap();
    
    @Actor
    public void actor1(StringResult5 result) {
        try {
            result.r1 = ResultAdapter.get(obj.put(0,0));
        } catch (Exception e) {
            result.r1 = ResultAdapter.get(e);
        }
        try {
            result.r2 = ResultAdapter.get(obj.put(1,1));
        } catch (Exception e) {
            result.r2 = ResultAdapter.get(e);
        }
        try {
            result.r3 = ResultAdapter.get(obj.keySet());
        } catch (Exception e) {
            result.r3 = ResultAdapter.get(e);
        }
    }
    
    @Actor
    public void actor2(StringResult5 result) {
        try {
            result.r4 = ResultAdapter.get(obj.put(1,0));
        } catch (Exception e) {
            result.r4 = ResultAdapter.get(e);
        }
        try {
            result.r5 = ResultAdapter.get(obj.toString());
        } catch (Exception e) {
            result.r5 = ResultAdapter.get(e);
        }
    }
}

---
28 of 773360 executions gave weak({ W(lin,po)[.][*,*], W(vis,po)[.][*,*], W(vis,lin)[.][*,A...) outcome: null, 0, [0, 1], null, {1=1}
---
Experiments completed
